{"version":3,"sources":["components/Food/Food.js","components/Foods/Foods.js","App.js","reportWebVitals.js","index.js"],"names":["Food","props","food","className","src","strMealThumb","alt","strMeal","Foods","setTimeout","document","getElementById","addEventListener","getFoods","useState","foods","setFoods","meals","searched","value","fetch","then","r","json","d","useEffect","console","log","style","textAlign","undefined","map","idMeal","App","type","placeholder","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sRAeeA,EAZF,SAACC,GACV,IAAQC,EAASD,EAATC,KACR,OACI,qBAAKC,UAAU,cAAf,SACI,sBAAKA,UAAU,OAAf,UACI,qBAAKC,IAAKF,EAAKG,aAAcC,IAAI,KACjC,6BAAKJ,EAAKK,gBCsCXC,G,MA3CD,WACVC,YAAW,WACPC,SAASC,eAAe,gBAAgBC,iBAAiB,QAASC,KACnE,GAEH,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAMA,SAASH,IAELG,EAAS,CAAEC,MAAO,YAElB,IAAMC,EAAWR,SAASC,eAAe,eAAeQ,MACvC,KAAbD,EAEJE,MADY,wDAA0DF,GAC3DG,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAAQF,MAAK,SAAAG,GAAC,OAAIR,EAASQ,MAF3BR,EAAS,IAKpC,GAfAS,oBAAUZ,EAAU,IAGpBY,qBAAU,WAAQC,QAAQC,IAAIZ,KAAU,CAACA,IAYrB,YAAhBA,EAAME,MACN,OAAO,oBAAIW,MAAO,CAAEC,UAAW,UAAxB,wBAEN,QAAoBC,IAAhBf,EAAME,MACX,OAAO,oBAAIW,MAAO,CAAEC,UAAW,UAAxB,wBAEN,GAAoB,OAAhBd,EAAME,MACX,OAAO,oBAAIW,MAAO,CAAEC,UAAW,UAAxB,8BAGP,IAAQZ,EAAUF,EAAVE,MACR,OACI,qBAAKd,UAAU,gBAAf,SAEQc,EAAMc,KAAI,SAAA7B,GAAI,OAAI,cAAC,EAAD,CAAMA,KAAMA,GAAWA,EAAK8B,eCrBnDC,MAdf,WACE,OACE,sBAAK9B,UAAU,MAAf,UACE,qBAAIA,UAAU,UAAd,yBAAoC,yDACpC,sBAAKA,UAAU,aAAf,UACE,uBAAO+B,KAAK,OAAOC,YAAY,iBAAiBC,GAAG,gBACnD,uBAAOF,KAAK,SAASf,MAAM,SAASiB,GAAG,oBAEzC,8BAAK,cAAC,EAAD,UCAIC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASC,eAAe,SAM1B0B,M","file":"static/js/main.1e2e0a54.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Food.css';\r\n\r\nconst Food = (props) => {\r\n    const { food } = props;\r\n    return (\r\n        <div className=\"single-food\">\r\n            <div className=\"food\">\r\n                <img src={food.strMealThumb} alt=\"\" />\r\n                <h3>{food.strMeal}</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Food;","import React, { useEffect, useState } from 'react';\r\nimport Food from '../Food/Food';\r\nimport './Foods.css';\r\n\r\nconst Foods = () => {\r\n    setTimeout(() => {\r\n        document.getElementById('searchButton').addEventListener('click', getFoods);\r\n    }, 1);\r\n\r\n    const [foods, setFoods] = useState({});\r\n    useEffect(getFoods, []);\r\n\r\n    // watch foods when changes by adding dependency in useEffect function\r\n    useEffect(() => { console.log(foods) }, [foods]);\r\n\r\n    function getFoods() {\r\n        // set status as loading\r\n        setFoods({ meals: 'Loading' });\r\n\r\n        const searched = document.getElementById('searchField').value;\r\n        if (searched === '') { setFoods({}); return };\r\n        const url = \"https://www.themealdb.com/api/json/v1/1/search.php?s=\" + searched;\r\n        fetch(url).then(r => r.json()).then(d => setFoods(d));\r\n    }\r\n\r\n    if (foods.meals === 'Loading') {\r\n        return <h1 style={{ textAlign: 'center' }}>Loading...</h1>\r\n    }\r\n    else if (foods.meals === undefined) {\r\n        return <h1 style={{ textAlign: 'center' }}>No Input.!</h1>\r\n    }\r\n    else if (foods.meals === null) {\r\n        return <h1 style={{ textAlign: 'center' }}>Nothing found...</h1>\r\n    }\r\n    else {\r\n        const { meals } = foods;\r\n        return (\r\n            <div className=\"foodContainer\">\r\n                {\r\n                    meals.map(food => <Food food={food} key={food.idMeal}></Food>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nexport default Foods;","\r\nimport './App.css';\r\nimport Foods from './components/Foods/Foods';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"heading\">Foods search<sub>made using React.js</sub></h1>\r\n      <div className=\"searchArea\">\r\n        <input type=\"text\" placeholder=\"type food name\" id=\"searchField\" />\r\n        <input type=\"button\" value=\"Search\" id=\"searchButton\" />\r\n      </div>\r\n      <div><Foods></Foods></div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}